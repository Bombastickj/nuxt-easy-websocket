import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import { genImport } from 'knitwork'
import { camelCase } from 'scule'

import type { Nuxt } from 'nuxt/schema'
import type { NuxtEasyWebSocketContext } from '../types'

export function generateClientEvents(
  { resolver, clientRoutes }: NuxtEasyWebSocketContext,
  nuxt: Nuxt,
) {
  const generatedTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
${Object.keys(clientRoutes).flatMap(key => clientRoutes[key]!.map(route => genImport(route.filePath, `${camelCase(key)}_${route.name}`, { singleQuotes: true }))).join('\n')}

export const clientRoutes = {
  ${Object.keys(clientRoutes).map(key => `'${key}': [
    ${clientRoutes[key]!.map(route => `{ name: '${route.routePath}', handler: ${camelCase(key)}_${route.name} }`).join(',\n    ')}
  ]`).join(',\n  ')}
}
`
  // Add the generated types to the Nuxt build
  const { dst } = addTemplate({
    filename: 'module/nuxt-easy-websocket-client.mts',
    getContents: () => generatedTemplate,
    write: true,
  })

  // Make the generated template available to nuxt
  nuxt.options.alias['#nuxt-easy-websocket/client'] = dst
  nuxt.options.build.transpile.push('#nuxt-easy-websocket/client')

  const typeImportPath = resolver.resolve('./runtime/shared-types')
  const generatedTypeTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
declare module '#nuxt-easy-websocket/client' {
  import type { EasyWSServerConnectionGenerated, EasyWSServerEventGenerated } from '${typeImportPath}';
  export declare const clientRoutes: Record<'default' | string, EasyWSClientEventGenerated<any>[]>;
}
`
  // Add the type template to nuxt
  addTypeTemplate({
    filename: 'module/nuxt-easy-websocket-client.d.ts',
    getContents: () => generatedTypeTemplate,
    write: true,
  })
}
