import { addTypeTemplate } from '@nuxt/kit'

import type { Nuxt } from 'nuxt/schema'
import type { NuxtEasyWebSocketContext } from '../types'

export function generateRouteTypes(
  ctx: NuxtEasyWebSocketContext,
  nuxt: Nuxt,
) {
  const { clientRoutes, serverRoutes, resolver } = ctx

  const typeImportPath = resolver.resolve('./runtime/shared-types')
  const generatedTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket.
* Do not edit this file manually.
*/
import type { EasyWSClientArgs, EasyWSServerArgs } from '${typeImportPath}';

declare module '#nuxt-easy-websocket/routes' {
  interface EasyWSClientRoutes {
    ${clientRoutes.default.map(route => `'${route.routePath}': ${route.type}`).join('\n    ')}
  }
  interface EasyWSServerRoutes {
    ${serverRoutes.map(route => `'${route.routePath}': ${route.type}`).join('\n    ')}
  }
  interface EasyWSExternalRoutes {
    ${Object.keys(clientRoutes).filter(key => key !== 'default').map(key => `'${key}': { }`).join('\n    ')}
  }

  // Resolved types for send args (client/server)
  type EasyWSClientArguments<KEY extends keyof EasyWSServerRoutes = keyof EasyWSServerRoutes> = EasyWSClientArgs<EasyWSServerRoutes, KEY>
  type EasyWSServerArguments<KEY extends keyof EasyWSClientRoutes = keyof EasyWSClientRoutes> = EasyWSServerArgs<EasyWSClientRoutes, KEY>
  type EasyWSExternalArguments<
    SOCKET extends keyof EasyWSExternalRoutes = keyof EasyWSExternalRoutes,
    KEY extends keyof EasyWSExternalRoutes[SOCKET] = keyof EasyWSExternalRoutes[SOCKET]
  > = EasyWSClientArgs<EasyWSExternalRoutes[SOCKET], KEY>
}
`
  // Add the generated types to the Nuxt build
  const { dst } = addTypeTemplate({
    filename: 'types/nuxt-easy-websocket-routes.d.ts',
    getContents: () => generatedTemplate,
    write: true,
  }, { nitro: true, nuxt: true })
  // Make the generated template available to the server handler
  nuxt.options.alias['#nuxt-easy-websocket/routes'] = dst
}
