import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import { genImport } from 'knitwork'
import { camelCase } from 'scule'
import { MODULE_TMP_PATH } from '../constants'

import type { Nuxt } from 'nuxt/schema'
import type { NuxtEasyWebSocketContext } from '../types'

export function generateClientEvents(
  { resolver, clientRoutes }: NuxtEasyWebSocketContext,
  nuxt: Nuxt,
) {
  const getContents = () => {
    const imports: string[] = []
    const body: string[] = []

    for (const [ns, map] of clientRoutes) {
      const items = Array.from(map.values())
      const nsVar = camelCase(ns)

      for (const r of items) {
        const id = `${nsVar}_${r.name}`
        imports.push(genImport(r.filePath, id, { singleQuotes: true }))
      }

      body.push(
        `'${ns}': [\n    ${items.map((r) => `{ name: '${r.routePath}', handler: ${nsVar}_${r.name} },`).join('\n    ')}\n  ]`,
      )
    }

    return `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
${imports.join('\n')}

export const clientRoutes = {
  ${body.join(',\n  ')}
}
`
  }

  // Add the generated types to the Nuxt build
  const { dst } = addTemplate({
    filename: MODULE_TMP_PATH.clientEvents,
    write: true,
    getContents,
  })

  // Make the generated template available to nuxt
  nuxt.options.alias['#nuxt-easy-websocket/client'] = dst
  nuxt.options.build.transpile.push('#nuxt-easy-websocket/client')

  const typeImportPath = resolver.resolve('./runtime/shared-types')
  const generatedTypeTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
declare module '#nuxt-easy-websocket/client' {
  import type { EasyWSServerConnectionGenerated, EasyWSServerEventGenerated } from '${typeImportPath}';
  export declare const clientRoutes: Record<'default' | string, EasyWSClientEventGenerated<any>[]>;
}
`
  // Add the type template to nuxt
  addTypeTemplate({
    filename: MODULE_TMP_PATH.clientEventTypes,
    getContents: () => generatedTypeTemplate,
    write: true,
  })
}
