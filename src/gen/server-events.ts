import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import { genImport } from 'knitwork'

import type { Nuxt } from 'nuxt/schema'
import type { NuxtEasyWebSocketContext } from '../types'

export function generateServerEvents(
  { resolver, serverRoutes, serverConnection }: NuxtEasyWebSocketContext,
  nuxt: Nuxt,
) {
  const generatedTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
// server-routes
${serverRoutes.map(route => genImport(route.filePath, route.name, { singleQuotes: true })).join('\n')}

// server-connection
${serverConnection.map(con => genImport(con.filePath, `_${con.name}`, { singleQuotes: true })).join('\n')}

export const serverRoutes = [
  ${serverRoutes.map(route => `{ name: '${route.routePath}', handler: ${route.name} }`).join(',\n  ')}
];

export const serverConnection = [
  ${serverConnection.map(con => `{ type: '${con.name}', handler: _${con.name} }`).join(',\n  ')}
]
`
  // Add the template to Nuxt build
  const { dst } = addTemplate({
    filename: 'module/nuxt-easy-websocket-server.mts',
    getContents: () => generatedTemplate,
    write: true,
  })

  // Make the generated template available to nuxt
  nuxt.options.alias['#nuxt-easy-websocket/server'] = dst
  nuxt.options.build.transpile.push('#nuxt-easy-websocket/server')

  // generate declaration file
  const typeImportPath = resolver.resolve('./runtime/shared-types')
  const generatedTypeTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
declare module '#nuxt-easy-websocket/server' {
  import type { EasyWSServerConnectionGenerated, EasyWSServerEventGenerated } from '${typeImportPath}';
  export declare const serverRoutes: EasyWSServerEventGenerated<any>[];
  export declare const serverConnection: EasyWSServerConnectionGenerated[];
}
`
  // Add the type template to Nitro
  addTypeTemplate({
    filename: 'module/nuxt-easy-websocket-server.d.ts',
    getContents: () => generatedTypeTemplate,
  }, { nitro: true })
}
