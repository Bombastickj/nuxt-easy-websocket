import { genDynamicImport, genImport } from 'knitwork'
import { addTemplate, addTypeTemplate } from '@nuxt/kit'
import type { Nuxt } from '@nuxt/schema'
import type { NuxtEasyWebSocketContext } from './context'

export function generateRoutes(
  { clientRoutes, serverRoutes }: NuxtEasyWebSocketContext,
  nuxt: Nuxt,
) {
  const generatedTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
declare module '#nuxt-easy-websocket/routes' {
  interface EasyWSClientRoutes {
    ${clientRoutes.map(route => `'${route.routePath}': Parameters<typeof ${genDynamicImport(route.filePath, { wrapper: false, singleQuotes: true })}.default>[0]['data']`).join('\n    ')}
  }
  interface EasyWSServerRoutes {
    ${serverRoutes.map(route => `'${route.routePath}': Parameters<typeof ${genDynamicImport(route.filePath, { wrapper: false, singleQuotes: true })}.default>[0]['data']`).join('\n    ')}
  }
}

export {}
`
  // Add the generated types to the Nuxt build
  const { dst } = addTypeTemplate({
    filename: 'types/nuxt-easy-websocket-routes.d.ts',
    getContents: () => generatedTemplate,
    write: true,
  })
  // Make the generated template available to the server handler
  nuxt.options.alias['#nuxt-easy-websocket/routes'] = dst
}

export function generateClientEvents(
  { resolver, clientRoutes }: NuxtEasyWebSocketContext,
  nuxt: Nuxt,
) {
  // Generate TypeScript interfaces based on scanned events
  const typeImportPath = resolver.resolve('runtime/shared-types')
  const generatedTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
import type { EasyWSClientEventGenerated } from '${typeImportPath}';

${clientRoutes.map(route => genImport(route.filePath, route.name, { singleQuotes: true })).join('\n')}

export const clientRoutes: EasyWSClientEventGenerated<any>[] = [
  ${clientRoutes.map(route => `{ name: '${route.routePath}', handler: ${route.name} }`).join(',\n  ')}
]
`

  // Add the generated types to the Nuxt build
  const { dst } = addTemplate({
    filename: 'modules/nuxt-easy-websocket-client.ts',
    getContents: () => generatedTemplate,
    write: true,
  })

  // Make the generated template available to nuxt
  nuxt.options.alias['#nuxt-easy-websocket/client'] = dst
  nuxt.options.build.transpile.push('#nuxt-easy-websocket/client')
}

export function generateServerEvents(
  { resolver, serverRoutes, serverConnection }: NuxtEasyWebSocketContext,
  nuxt: Nuxt,
) {
  // Generate TypeScript interfaces based on scanned events
  const typeImportPath = resolver.resolve('runtime/shared-types')
  const generatedTemplate = `/**
 * This file is auto-generated by nuxt-easy-websocket module.
 * Do not edit this file manually.
 */
import type { EasyWSServerConnectionGenerated, EasyWSServerEventGenerated } from '${typeImportPath}';

// server-routes
${serverRoutes.map(route => genImport(route.filePath, route.name, { singleQuotes: true })).join('\n')}

// server-connection
${serverConnection.map(con => genImport(con.filePath, `_${con.name}`, { singleQuotes: true })).join('\n')}

export const serverRoutes: EasyWSServerEventGenerated<any>[] = [
  ${serverRoutes.map(route => `{ name: '${route.routePath}', handler: ${route.name} }`).join(',\n  ')}
];

export const serverConnection: EasyWSServerConnectionGenerated[] = [
  ${serverConnection.map(con => `_${con.name}`).join(',\n  ')}
]
`

  // Add the template to Nuxt build
  const { dst } = addTemplate({
    filename: 'modules/nuxt-easy-websocket-server.ts',
    getContents: () => generatedTemplate,
    write: true,
  })

  // Make the generated template available to nuxt
  nuxt.options.alias['#nuxt-easy-websocket/server'] = dst
  nuxt.options.build.transpile.push('#nuxt-easy-websocket/server')
}
