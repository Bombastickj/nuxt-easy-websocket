import { addTypeTemplate } from '@nuxt/kit'
import type { NuxtEasyWebSocketContext } from '../types'

export function generatePluginTypes({ resolver }: NuxtEasyWebSocketContext) {
  const typeImportPath = resolver.resolve('./runtime/shared-types')
  const generatedTemplate = `/**
* This file is auto-generated by nuxt-easy-websocket module.
* Do not edit this file manually.
*/
import type { EasyWSClientArgs, EasyWSClientState } from '${typeImportPath}';
import type { EasyWSExternalRoutes, EasyWSClientArguments, EasyWSExternalArguments } from '#nuxt-easy-websocket/routes';

type NuxtEasyWebSocketPlugin = {
  send: (...args: EasyWSClientArguments) => Promise<void>
  state: Readonly<Ref<EasyWSClientState>>
  connectionStatus: ComputedRef<"connecting" | "connected" | "closing" | "disconnected" | "unknown">
  maxReconnectAttemptsReached: ComputedRef<boolean>

  connect: () => void
  disconnect: (keepClosed?: boolean) => void | undefined
  forceReconnect: () => void

  // External WebSockets
  external: {
    [K in keyof EasyWSExternalRoutes]: {
      send: <T extends keyof EasyWSExternalRoutes[K]>(...args: EasyWSExternalArguments<K, T>) => Promise<void>
      state: Readonly<Ref<EasyWSClientState>>
      connectionStatus: ComputedRef<"connecting" | "connected" | "closing" | "disconnected" | "unknown">
      maxReconnectAttemptsReached: ComputedRef<boolean>
      connect: () => void
      disconnect: (keepClosed?: boolean) => void | undefined
      forceReconnect: () => void
      setURL: (url: string) => void
    }
  }
}

declare module '#app' {
  interface NuxtApp {
    $easyWS: NuxtEasyWebSocketPlugin
  }
}

declare module 'vue' {
  interface ComponentCustomProperties {
    $easyWS: NuxtEasyWebSocketPlugin
  }
}

export {}
`
  // Add the generated types to the Nuxt build
  addTypeTemplate({
    filename: 'types/nuxt-easy-websocket-plugin.d.ts',
    getContents: () => generatedTemplate,
    write: true,
  })
}
